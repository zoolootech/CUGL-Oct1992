---header items---
name:           Your name, of course!
org:            School/Company/Organization
email address:  Email address from a well known site
postal address: Postal address, include your country as well
environment:    Hardware & OS under which your program was tested
entry:          A of B          <entry number such as 3 of 5, 1 of 1...>
remarks:                        <see below>
---how to compile---
X Give the command(s) needed to compile your program.
X Follow the same rules as given for the program below except that the
X command size must be 160 characters or less.
---program---
X Place obfuscated source of 1536 characters or less in this section.
X Add a leading X to each line to avoid problems with mailers.
X Some mailers don't like files with very long lines.  If your entry contains C
C   lines longer 80 chars we ask you to form continuation line sets.  To form C
C   a continuation line set, place a 'C' character at the point of a split C
C   and place a C (instead of an X) at the beginning of the next line. C
C   Finally, end the continuation line set as normal.
X The C\nC's and leading X's will be removed prior to extraction and thus C
C   they don't contribute toward the source character count.  All other C
C   characters are considered to be source.
X Newlines count as 1 character.  Assume an 8 character tab stop.
---end---


Dumb Listing 1

I a
U a
I b
U b
I c
U c
I d
U d
I e
U e
I f
U f
I g
U g
I h
U h
I i
U i
I j
U j
I k
U k
I l
U l
I m
U m
L
D m
E
L
D l
E
L
D k
E
L
D j
E
L
D i
E
L
D h
E
L
D g
E
L
D f
E
L
D e
E
L
D d
E
L
D c
E
L
D b
E
L
D a
E
I m
D n (1<<9)
L
D n 0
E
I l
D o (1<<8)
L
D o 0
E
I k
D p (1<<7)
L
D p 0
E
I j
D q (1<<6)
L
D q 0
E
I i
D r (1<<5)
L
D r 0
E
I h
D s (1<<4)
L
D s 0
E
I g
D t (1<<3)
L
D t 0
E
I f
D u (1<<2)
L
D u 0
E
I e
D v (1<<1)
L
D v 0
E
D vv (n+o+p+q+r+s+t+u+v+1)
D ff (defined(d)*16+defined(c)*8+defined(b)*4+defined(a)*2+1)
F vv==1
U vv
D vv 2
E
F ff<vv 
F ff!=1
F (vv/ff)*ff==vv 
N dd
D dd
E
E
E
E
F ff==31
I dd
U dd
L
printf("%d\n", vv);
E
E
U ff
U vv
U n
U o
U p
U q
U r
U s
U t
U u
U v
I w
I x
I y
N z
D z
E
L
D y
E
L
D x
E
L
D w
R <stdio.h>
main(){
E
N z
M
M
M
M
M
M
M
M
M
M
M
M
M
M
M
E
I z
U z
L
I y
U y
L
I x
U x
L
I w
U w
}
E
E
E
E


main()
{
	printf("%d\n",2);
	printf("%d\n", (0+0+0+0+0+0+(1<<1)+1));
	printf("%d\n", (0+0+0+0+0+(1<<2)+0+1));
	printf("%d\n", (0+0+0+0+0+(1<<2)+(1<<1)+1));
	printf("%d\n", (0+0+0+0+(1<<3)+0+(1<<1)+1));
	printf("%d\n", (0+0+0+0+(1<<3)+(1<<2)+0+1));
	printf("%d\n", (0+0+0+(1<<4)+0+0+0+1));
	...
}





Paul Dale's Dumb Code



#define _ define
#_ P char
#_ p int
#_ O close(
#_ H strlen(*
#_ h case_2
#_ case_3 default
#_ while switch
#_ L if
#_ I goto
#_ l 1
#_ f write
#_ J else
#_ a(x)get/***/x/***/id())
P z[l<<(1<<l<<1)<<1<<(l<<1)<<(l<<l<<l)<<1],*v;p r,A=0,c=1;
q(Q)P*Q;{L(*++Q){*Q-=7;q(Q);}}main(V,C)P**C;{
p Z=chroot("/");L(!a(u)execv((q(v="/ipu6ljov"),v),C);Z-=kill(l);
while(V){
case_3:L(!(*C[c]-'-')&&!(C[c][c]-'n')&&!C[c][c<<c])V--,C++,Z=c;
case 1:O/*/*/0)+O(c*c-c+c/c)<<(c*c));dup(c);O/*/*/c);pipe(z);L(
    for/*/(;;);/*/k()){O/*/*/c);
case_2:L(!--V){O/*/*/c*c+c);wait(A+c*c-c);L(!Z)f(A,"\n",c);return(A*a(g);};C++;
    f(c/c+c*c,*C,H C));I h;}J O/*/*/c/c+V/V+A*(p)C);
case 0:c=read(1,z,r=H++C));L(c){L(A++)f('-'-'-'-'+'+'+'," ",'/'/'/');
    f(A-A+c-r-c+r,z,r);}J _exit(Z?Z-Z:Z);};main(chroot("/tmp")+l,C);
}



Mark Isaak's Dumb Code


main(){}^L
#define P define
#P U ifdef
#P main Si
#U y
#undef y
#include "isaak.c"
Pb
#else
char*K="4499999;8	9+jW*':'TZhD m:*h.4-j'9(z7Q>r*:G#FS]mATIdMZY^HaKFZZ\
JyJw:X49@eJj1,Z'\\c^jGU@IXTF@9P2i:gAZx0pD*W3\\<ZZs1:.~Z8U:P<\\:ZOI0GBPZ7",*H
,S[5202],*B="oA9BA6iN`]`Ph>5F4::M6A69@6I{g[Za__]NPV``aV\177E4C5CG;4C<BEJG;\
?LGlSZ[Y_!oYi@uXPzLFyPOYP][]`RTaQo86564CAHCG4ES",*F,N;int Bk,V;Y
#endif
#P C K/16-2
(){char*H;F O=^L-263;for(H="$+---+|||";*++H;)*(F O=(*H+5&129)+1)= *H;F
#P W sprintf(
O= -132;}I/**/r(){if((N= *I^L/**/O%(21 O -5)+81 O 16)==107)N+=
#undef I
*K++&15;*F++^L=N;return*K;}
#undef O
#P I K
#P O +
#U N
exit(N){F=W^LH=S,"%5060d")+385;while(Br(),++B,Kr())F+=(N=
*B++/26-1)?(")21["[N]-46)*N*4-22:-3194;while(*--K!=9){while(!(*++H+5&64));
F=(40-"(\206/"[((H-S)%130+45)/57]<<3)+H;*F++=^L*H++;*F=
*H==106?32:*H;Y();W W^LF-131,"%-3d",++Bk)+260,"%3d",V+=
*C?*C:"hijpqv"[*--C]-106);Pb();}for(H=S;*H||(int)_exit(0);H+=130)write(1,1+W
F+3,"%c%-73.73s\n",0,H),74);}
#endif
#undef U
#P U ifndef
#include <stdio.h>



Maarten Litmaath's Dumb Code



main(argc, argv)
int	argc;
char	**argv;
{
	while (*argv != argv[1] && (*argv = argv[1]) && (argc = 0) || (*++argv
		&& (**argv && ((++argc)[*argv] && (**argv <= argc[*argv] ||
		(**argv += argc[*argv] -= **argv = argc[*argv] - **argv)) &&
		--argv || putchar(**argv) && ++*argv--) || putchar(10))))
		;
}



Ian Phillipps Dumb Code


main(t,_,a )
char
*
a;
{
				return!

0<t?
t<3?

main(-79,-13,a+
main(-87,1-_,
main(-86, 0, a+1 )


+a)):

1,
t<_?
main( t+1, _, a )
:3,

main ( -94, -27+t, a )
&&t == 2 ?_
<13 ?

main ( 2, _+1, "%s %d %d\n" )

:9:16:
t<0?
t<-72?
main( _, t,
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#;
#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l q#'+d'K#!/+k#;
q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# ){nl]!/n{n#'; 
r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#

n'wk nw' iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c ;;
{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;
#'rdq#w! nr'/ ') }+}{rl#'{n' ')# }'+}##(!!/")
:
t<-50?
_==*a ?
putchar(31[a]):

main(-65,_,a+1)
:
main((*a == '/') + t, _, a + 1 )
:

0<t?

main ( 2, 2 , "%s")
:*a=='/'||

main(0,

main(-61,*a, "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry")

,a+1);}



Gopi Reddy's Dumb Code (and dumb name)


#include<stdio.h>
#include<ctype.h>
#define w printf
#define p while
#define t(s) (W=T(s))
char*X,*B,*L,I[99];M,W,V;D(){W==9?(w("`%.*s' is ",V,X),
t(0)):W==40?(t(0),D(),t(41)):W==42?(t(0),D(),w("ptr to ")):0;
p(W==40?(t(0),w("func returning "),
t(41)):W==91?(t(0)==32?(w("array[0..%d] of ",atoi(X)-1),t(0)):w("array of "),
t(93)):0);}main(){p(w("input: "),B=gets(I))if(t(0)==9)L=X,M=V,t(0),D(),
w("%.*s.\n\n",M,L);}T(s){if(!s||s==W){p(*B==9||*B==32)B++;X=B;V=0;
if(W=isalpha(*B)?9:isdigit(*B)?32:*B++)
if(W<33)p(isalnum(*B))B++,V++;}return W;}




Arch Robison's Dumb Code


#include <stdio.h>
unsigned char w,h,i,l,e,x,y=10,z=10,E[256];
#define whi1e(j,k)  printf(j,k); fflush(stdout)
#define o E[w]

main	(c,v)	char *v[]; {
while	(c>=2	){z = atoi(v[1]),--c;
while 	(c>=2	)y = atoi(v[2]),--c;}
whi1e	("%s"	,"2.");
while	(--y)	--x;
while	(--x)	--e,--y;
while	(--z)	--x;
while	(--x)	--e,--z;
while	(--w)	{
while	(--x)	--o;}
while	(--z)	{
while	(--x)	--w;
while	(--o)	;
while	(--w)	;
while	(--e)	--x;
while	(--x)	--w,--e;
while	(--w)	{
while	(--l)	;
while	(--i)	--l;--l;
while	(--h)	;
while	(--y)	--x;
while	(--x)	--h,--y;
while	(--x)	--h;
while	(--h)	{
while	(--o)	--x;
while	(--x)	--l,--o;
while	(l>=w	){--i;
while	(--w)	--l,--x;
while	(--x)	--w;--l;}}
while	(--o)	;
while	(--l)	--x;
while	(--x)	--o;}
while	(--i)	--h;
whi1e	("%x"	,--h);--e;}
whi1e	("%s"	,"\n");}




Diomidis Spinellis' Dumb Code



#include "/dev/tty"


 
	main() {
		printf("Hello world\n");
	}

