.so AN.NRO
.TH CTOA 1 "CRL-to-CSM postprocessor"
.SH NAME
CTOA - CRL-to-CSM postprocessor
.SH SYNOPSIS
.bo
ctoa infile.c [>outfile.csm]
.SH DESCRIPTION
.PP 
CTOA is a postprocessor intended to produce the assembly
language equivalent of a BDS `C' program, either so that the user
can see what sort of code the compiler generated or in order
(Heaven forbid!) to use it as a base to develop an assembly
language version of the same function.
.PP
To operate, it needs the following files:
.br
.sp
.in +4
.ti -2
- The original source file (normally <program>.C).
.br
.ti -2
- The relocatable object file, <program>.CRL.
.br
.ti -2
- (Optional) The symbol table file, <program>.CDB, produced by
compiling the source with the '-k' option in BDS `C' releases
1.50 and later.  While this file is not specifically required,
the postprocessor can do a much better job if it is present.  
.br
.in -4
.PP
It produces, to the standard directed output stream, an assembly
language source in .CSM format, suitable for running through
CASM2.  
.SH EXAMPLES
ctoa stdlib1.c >stdlib1.csm
.SH DIAGNOSTICS
.PP
As each function is processed, CTOA gives statistics on the
terminal relating to the function.  Any other messages are either
standard I/O error messages or indicate an internal error in CTOA.
.SH BUGS
.PP
CTOA cannot read the programmer's mind;  it may code an
inappropriate symbol for some particular value in the object
code.  If hand changes are made to the .CSM file prior to
assembly, they must be verified *extremely* carefully, as the
generated assembly code may have non-symbolic references to
locations that have been changes.
.SH NOTES
.PP
If it is impossible to include the .CDB file (for space
limitations, for example), it is still wise to use an object
program compiled with the '-k' option.  The postprocessor uses
the line number information in the .CRL file in generating the
comments in the assembly language; this information is not
available for programs compiled without '-k'.
