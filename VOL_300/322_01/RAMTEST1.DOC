    FUNCTIONAL TESTING OF RAM--IMPLEMENTATION OF THE ATS AND

                      THE ATS+ ALGORITHMS

                               by

                        Mohammad Khurrum
                              and
                        Dean Lance Smith
                Dept. of Electrical Engineering
                    Memphis State University
                       Memphis, TN 38152
                         (901) 678-3253
                         (901) 678-2175


This program is an implementation of the ATS (Algorithmic Test
Sequence) algorithm developed by Knaizuk and Hartman and the
ATS+ algorithm developed by Nair. The program tests RAM for any
single or multiple stuck-at-0 or stuck-at-1 faults.  The inputs
to the program are the starting and ending addresses of any part
of the Random Access Memory.  The output is the address of the
location where the fault occurrs and the type of the fault which
occurrs (stuck-at-0 or stuck-at-1).  A message is displayed if
no stuck-at fault is detected.

Two functions, ats() and atst(), do the actual testing.  The
ats() function has eight steps.  These steps write patterns and
then read them back to check if they were written properly or if
there were any faults.  The atst() function has thirteen steps
which do the testing and indicate a fault if there is one.

The variables g0, g1, g2, end and start are huge pointers.  The
variables seg1, seg2, off1 and off2 are integers.  The RAM is
divided into three sections represented by g0, g1 and g2.  The
function hex() reads the starting and ending addresses (segment,
offset) from the keyboard in hexadecimal.
