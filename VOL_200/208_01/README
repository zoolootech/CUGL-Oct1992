README


**BUGFIX** against pre 15/6/1987revision
	1) disk swapping used to go mad.
	2) writing of part of text to outside file had a bug.
*NEW FEATURES
	1) for clarity's sake, all the file I/O are done in a standard way
	2) 'jump to line' command accepts relative jumps if the line number
		begins with a '+' or '-'.
** what is 'e' ***
	CUG 133 contains the original source in BDS C. CUG157 and CUG158
	and CUG199 are re-writes. This is yet another rewrite.
	Modifications affect key assignments, cursor motions, interactive
	messages. 'e for 68K' is nothing different from the original except
	the language.
** quality **
	as Mr Haefner states, 'e' was created as an ersatz for WORDSTAR but
	with less weight. So, it will not make sense arguing that it is
	not better than any editor normally found in mini or large computer
	environment. If any further hacking of 'e' is done, it must
		1) eliminate OS dependency
		2) enhance maintenability
	A good editor does not have 'good features', but it allows you
	to put 'good features' yourself.

	I now think mc68000 users should forget 'virtual memory'(disk swapping)
	because using megabytes of main memory is what cpm68k is for.
***FILES**
e.doc	original initiation by Mr Gilbert.
e68k.doc
	explains how 'e' was ported. also contains suggestions
	to the writers in C.
e[0-9].c and e.h are almost identical with the
	original. written in standard C.
eterm.c
	terminal configuration program
	you must # define one among
	adm31, adds, kaypro, haze, dec52, h19, adm3a, beehive, dec vt100
cpm68k.c
	is os dependent. must be read before running compilers.
	bug fix of some subroutines are also included.
***STUFFINGS
	the following files have nothing to do with 'e'.
xmain.c
	another bug fix for CP/M68K.
	A command line parser. replace 'xmain.o' in 'clib'.
	most of the algorithm are stolen from
		M.J.Rochkind:"Advanced UNIX programming". Prentice Hall.
	it implements upper and lower case distinction, redirection, quoted
	strings, wild card expansion etc.
cb.c	pretty printer taken from CUG library. written in Portable C.
	checks the pairing of parentheses, curly braces, single and double
	quotes and comments.
tab.c	eliminates unnecessary spaces in text files. in Portable C.
**PORTABILITY**
pre-processor:
	if your cp68.rel issued an error message, check the result and
	if it is too bad, you will have to manually follow
			# else

			#  if
			#  endif
			# endif
	sequence. (standard cpp will keep quiet.) cp68.rel may not allow
	spaces after '#'.
DRI C compiler on CPM86 would need very few fixes( BDOS() function etc.).
compilers other than DRI C:
	rewrite cpm68k.c
	You may not be able to implement raw() and noraw() , and obliged to
	use bdos calls instead of using read()-write() functions.


Your Comments
	are welcome. If you are interested in CP/M68K, write to me. I bet
CP/M68K is much better than you think. I like running several machines from
a single terminal rather than sharing a single machine with many people.

		Dr Yoshimasa Tsuji
		Kasuga 2-20-12-114,
		Bunkyo-ku,
		Tokyo 112,
		JAPAN



