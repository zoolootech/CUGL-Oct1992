read.me

this floppy contains 'e'(version 4.8) originally written by Mr Gilbert and
	configured to cp/m68k by Y. Tsuji with the kind help from
	Mr Haefner, implementor of 'e'(version 4.6) to MSDOS and VMS.
	Thanks to them. The copyright belongs to them.
e68k.doc
	explains how 'e' was ported. also contains suggestions
	to the writers in C.
files e[0-9].c , e10.c, e.h are almost identical with the
	original. written in standard C.
eterm.c
	terminal configuration program
	you must # define one among
	adm31, adds, kaypro, haze, dec52, h19, adm3a, beehive, dec vt100

cpm68k.c
	is os dependent. must be read before running compilers.
	bug fix of some subroutines are also included.
libc.dat
	is my comments on the library supplied by the DRI.  It is an
	exhaustive tutorial.
crt.s
	a C program starter for cp/m68k. to be assembled.
	first stuff to the linker.
BUGS:	UNIX 'lint' reported no errors and warnings.
	 bdos(CONSTAT) does not make sense in UNIX, nor does
	virtual memory handler in VMS UNIX.
	 The facilities provided by 'e' is very limited compared with
	standard screen editors(vi, emacs), but under systems without
	demand paging, screen editors have to be small.(under 1200 baud
	'ed' is faster).
Your Comments
	are welcome. If you are interested in CP/M68K, write to me.

		Dr Yoshimasa Tsuji
		Kasuga 2-20-12-114,
		Bunkyo-ku,
		Tokyo 112,
		JAPAN





WHAT IS cp/m68k ?
	it is a CP/M implementation of UNIX( seventh edition). I wonder
	why DRI did not set up the third system calls for UNIX compati-
	bility. Then we could have been able to do
		_write:
			lea	4(a7),a0	argument pointer
			move	#4,d0		write= 4
			trap	#4		third system entry
			rts
	Do they expect MC68000 users to own less than 32K bytes of
	memory ? The default is for those people with an evaluation kit.
	They expect serious people use UNIX, bypassing CP/M68K.
	That is why CP/M68K is so obscure after four years of existence.

	We need a cross compiler from VAX VM UNIX to cp/m68k. After all,
	microcomputers are cheap(mine is one thousandth) but slow(my guess is
	that it is one tenth). VAX compiled and linked 'e' in less than ten
	seconds while mine took two minutes. That I use DRI's "c0, c1, as"
	is wrong. Have you got a faster compiler/assembler for 68K UNIX ?

