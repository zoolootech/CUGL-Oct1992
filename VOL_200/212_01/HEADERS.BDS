HEADERS.BDS      VERS:- 01.00  DATE:- 09/26/86  TIME:- 09:36:37 PM

Short descriptions of C programs and related files.

Written for BDS C compiler, version 1.50a, by

John A. Rupley
30 Calle Belleza
Tucson, AZ  85716
(602) 325-4533

/***************************************************************************/

DIOR.C   
DIO.CRL 
DIO.H   

IO redirection library and header from BDS C and Van Nuys Toolkit, 
by Eugene H. Mallory.

Minor modification: 
	avoid CR-CR pair before LF by patch in putchar() and by adding
		declaration of _putc_last in DIO.H;





FLOATR.C   
FLOAT.CRL 

Library of floating point functions (FLOAT.C, by Bob Mathias)
	with additions (FLOAT+44.C, by L.C. Calhoun)
	with added trig functions (CTRIG.C, by L.C. Calhoun)
	with added log functions (CLOGS.C, by L.C. Calhoun)
	with additional function(s) (by J.A. Rupley)

FLOAT.C from BDS C distribution package, version 1.5
FLOAT+44.C, CTRIG.C, AND CLOGS.C are from cug disk "functions III".

The v1.5 FLOAT.C has an updated version of _spr;
replaced v1.44 std functions by v1.5 std functions.





PERCOLAR.C   
PERCOLAR.COM 

Simulation of percolation on a two-dimensional square lattice, 
Option to block one or more regions of the lattice to prevent sites 
being filled (approximately circular blocked region = 1,3,5,3,1).
The algorithm is not efficient (300 seconds/1000 site 2-d sheet).

For more information, see header following, for PERC3DR.





PERC3DR.C   
PERC3DR.COM 

Simulation of percolation on a three-dimensional simple cubic lattice.
Option to wrap in one dimension, ie to simulate cylindrical shells.
The algorithm is fairly efficient (20 seconds/1000 site 2-d sheet).

A percolative process is characterized by a percolation transition, a phase
change at which long-range connectivity (e.g., a gel phase; conduction 
across the sample; etc) suddenly appears.  Connectivity is defined by the
extent of a cluster of filled sites adjacent (ie, connected) in the lattice.
Long-range connectivity is equivalent to a cluster of infinite extent.

The percolation model applies to stochastic processes taking place 
in a spatially disordered system.  
Examples: 
	gelation; 
	flow in a porous medium; 
	dilute magnets; 
	conductivity of conductor-insulator composite materials.

For a discussion of percolation, see R. Zallen, "The Physics of Amorphous
Solids", John Wiley, New York, 1983.

This program finds the fractional occupancy of the model lattice at the 
percolation transition.  Lattice sites are filled randomly.  When each filled
site is added to the lattice, connectivity is tested along one dimension
of the lattice (ie, between one pair of arbitrarily chosen sides of the 
lattice).  The point of the percolation transition is the point at which
connectivity between sides first appears.

Because of the stochastic character of percolation, a simulation consists
of the averaging of NRPT determinations of the percolation transition.

The program is set for looping over the simulation, with change in
control parameters at each loop.


STDLIB3R.C   
DEFF.CRL 
DEFF2.CRL 

STDLIB3R has file-handling functions that allow use of du: in addition 
to u/d: drive/user prefix.
The functions have been added to DEFF.CRL
They replace functions of same name in DEFF2.CRL, which must be 
patched (DEFF2.CRL: open -> xpen, etc).

Functions:
	open(), creat(), unlink(), rename(), execv(), exec(), du_ud().

In DEFF2.CRL:
	patched header for routines (open...exec -> xpen...xxec);
      	patched body of routines open and unlink;
	edfile or similar program used to make changes.

Execl is not patched and does not take du: form.

An alternate route, consuming less memory:
	revise "setfcu" routine of ccc.asm,
	then recompile: 
		   ccc.asm....c.ccc
		   bds.lib
		   deff2*.csm...deff2.crl
