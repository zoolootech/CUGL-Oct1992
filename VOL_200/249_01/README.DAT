

                                 C Spot Run

                      A User-Supported C Add-On Library

                         Version 2.1  "ReadMe" File

                                July 12, 1987


          Hello,  and  welcome to the C Spot Run  package.   This  file 
      contains  the information that for one reason or  another  wasn't 
      placed in the newsletter or documentation.

          Following is a list of the files in this archive and a  short 
      description of each.

              CCDEMOMS.BAT     Batch to compile CSRDEMO for Microsoft.
              CCDEMOTC.BAT     Batch to compile CSRDEMO for Turbo C.
              CHECKC.EXE       Executable for the CheckC program.
              COLOR.H          Include file with color definitions.
              CSR201.NWS       Volume 2 - Number 1 of the Newsletter.
              CSRDEMO.C        Demo program for C Spot Run.
              CSRDEMO.EXE      Executable of CSRDEMO.C.
              CSRDEMO.PRJ      Project file to make CSRDEMO in Turbo C.
              CSRDOS.H         Include file for directory searching.
              CSRMENU.H        Include file for menu routines.
              CSRMISC.H        Assorted #definitions for CSR.
              CSRMODES.H       Include file with set_mode() options.
              CSRMSC.LIB       Linkable  version  of  the  library  for 
                               Microsoft C.
              CSRSHELL.ASM     Shell for assembly interface to C.
              CSRSOUND.H       Some note values and declarations.
              CSRTIME.H        Text arrays for week and names.
              ERRORS.H         Text of critical DOS errors.
              FLINE.EXE        Executable for the FirstLine program.
              README.C         The source code to the README program.
              README.DAT       The file you are reading now.
              README.EXE       The executable version of README.
              SKEY.H           Special extended key definitions.
              TIMERS.C         Source code to timer functions.
              TSCSR.LIB        Linkable  version  of  the  library  for 
                               Turbo C.

          +>  CSRWHOLE.DOC     Complete C Spot Run documentation.
          +>  CSRUPDT.DOC      Just differences from 2.0 documentation.
          |
          +------------------  Only one of these  files is  present  in 
                               this  archive, depending on if  this  is 
                               CSR21.ARC or CSRUPDT2.ARC.


      What's Up.

          A  lot  is up.  CSR is here, bigger and better, and I  am  so 
      tired  I'm  about to fall asleep for a week.  (CSR is  only  here 
      because of a two week writing spree, code and text.)
          As  some of you know, a new version of CSR has been  due  for 
      some time, and promised for as long.  In order to finally release 
      it I had to make a few compromises.  (Sort of.)  The  compromises 
      are  pretty  much trivial, but include the following:   (This  is 
      also the 'future enhancements' list:) The communications routines 
      couldn't  be debugged in time.  Look forward to interrupt  driven 
      communications complete with a couple of file transfer protocols, 
      but not in this version.  ....  I'd really like to totally  clean 
      up  the documentation, but while some small changes were made  it 
      hsn't  been done yet.  The routines need better descriptions  and 
      much better examples.  ....  The source itself should be  cleaned 
      up,  with  declarations available for use with  #LINT_ARGS,  etc.  
      Some  optimization  wouldn't  hurt.   ....  I'd  like  to  add  a 
      completely  new set of windowing routines, virtual  windows  that 
      can  be bigger than their actual size, or even the screen.   ....  
      A  really good issue of the newsletter is high on my  wish  list, 
      and  I'm  looking forward to some writing contributions  by  some 
      users.  (Two have already volunteered.)
          You  can  look forward to some of those things  in  the  next 
      version  of CSR.  (This version, while very much an  improvement, 
      is  mainly  to fill some gaps left by 2.0, and  to  provide  some 
      support for Turbo C, etc.)
          Now  that  you've heard what isn't here I  suggest  that  you 
      check out the newsletter for a description of what is.


      Wading Through the Documenation.

          One  of  the first things your are going to want  to  do,  or 
      rather should do, is print out the documentation to C Spot Run.
          For  practice  (smile)  you can  print  out  the  newsletter.  
      You'll  need  either a file dumping utility that doesn't  do  ANY 
      formatting, or simply type COPY CSR201.NWS PRN at a DOS prompt.
          If  you already printed out the Version 2.0 documentation  to 
      CSR, you'll want the file CSRUPDT.DOC.  If you are starting  from 
      scratch you'll need CSRWHOLE.DOC.
          The first step is to make sure you have a good ribbon in your 
      printer,  enough  paper for an approx. 250 page document,  and  a 
      MONO SPACED font.  (A proportionally spaced font on a dot  matrix 
      or  laser  printer  makes for great  looking  text  and  horrible 
      formatting.  Trust me....) 
          6  LPI at 10 CPI....but then you know how to run  a  printer.  
      Keep in mind that the document is already justified and  contains 
      no tabs, only spaces.  And make sure you are lined up!  Watch  it 
      for  a  few pages to make sure.  (There are no form  feeds,  just 
      exactly  66  lines to a page.  Which means poor  alignment  won't 
      correct itself and could mean an awful waste of printer,  ribbon, 
      paper, time, etc.)
          Ok,  I've probably over simplified it by now.  Use  the  same 
      method as with the newsletter to dump it out.

          If  you use a 3 ring binder you'll be able to  easily  update 
      your   documentation,  just  as  those  who  are   printing   out 
      CSRUPDT.DOC  are now finding out.  (I keep the newsletters  there 
      too.)


      Some Things That Should be Mentioned.

          You'll  find that you can't backspace in the  [w]finptstred() 
      function  unless  you are at the last character.  I  didn't  have 
      time to fix it for this version.
          The play() function will give a high beep instead of a  pause 
      when  p (for pause) is specified.  The sound is a mix of my  code 
      and  Paul Canniff's and I wasn't able to track the  problem  down 
      yet.
          For  some  reasons  absolutely  unknown to  me  I  can't  get 
      programs  compiled with Turbo C's project-make to work  properly, 
      despite  talking to Borland and hearing of a user who did get  it 
      working.   If you can do it, please let me know how you  are  set 
      up, and if you can't, watch The Pinelands BBS for a message  that 
      says how.  (I'll put it up as soon as I find out.  Since I didn't 
      think  this worthy of delaying the release I put it out with  the 
      command line, and you shouldn't have trouble with that.)
          The  global  color  and border attribute  variables  are  now 
      available for use as externals, I didn't get around to explaining 
      them completely anywhere.
          The new menu functions have a lot of potential, but they  are 
      currently  the  'first round.'  (They should have  a  description 
      page in the 'related routines' area of the manual, but that's yet 
      another thing I still need to do.)
          08/11/87 - The problems with Microsoft C and the windows that 
      delayed  the  'official'  release  have  been  fixed.   The  only 
      remaining  problem  is  Microsoft C's  incompatibility  with  the 
      interrupt driven sound, which works with Turbo C.  The fix,  when 
      found, will be available on The Pinelands BBS.

          If  you  need input or menu routines that are a  little  more 
      specialized  (and  thus more efficient and easier to  use)  I  am 
      willing  to  do some custom work at a reasonable  rate.   I  have 
      tried  to make them as versatile as possible, without leaving  to 
      many holes, but they will never fit every need perfectly.  (Check 
      out the [w]fbreakon() functions for the latest in 'versatility.')


      Why You Should Register for C Spot Run.

          Why  should  you  register as a user of  C  Spot  Run?   Good 
      question.
          C  Spot  Run represents, as I've said many  times,  literally 
      hundreds of hours of work.  The source code is approaching  8,000 
      lines  (debugged and commented), the documentation is  about  250 
      pages  (more  than  30,000  words!),  and  there  is  a   support 
      newsletter, bulletin board, and updates.
          I believe in Shareware, and I want to keep C Spot Run in  the 
      Shareware  world.  I can't do that without support,  though.   My 
      investment is of a lot of time, effort, and money.  (New compiler 
      versions, better hardware, long distance phone calls, etc.)
          If  you make supporting C Spot Run worth my while, I'll  make 
      it worth your donation!


      A Big Favor I Would Greatly Appreciate.

          During  the school year 1987-88 I will be a junior  in  high-
      school.   I plan to start applying to different colleges  in  the 
      near future, and I would really like some testimonial letters  as 
      to my work on C Spot Run, etc.  If you use and like CSR, even  if 
      you aren't a registered user, please write something for me.   If 
      you  use CSR at work and could write on company  stationary,  all 
      the better.
          I would be extremely grateful for any assistance you can give 
      me in this area.  Thank you.


      Final Comments and Other Goodies.

          I've made all of my pleas and pledges so many times that  I'm 
      sure there is no need to repeat them here.  Simply put, I can use 
      any  of the following:  Money.  Source code.  Articles.   Example 
      programs.  Testimonal letters.  Suggestions.
          (Anything that lets me know you exist!)

          And  once again, feel free to call me if you want to  discuss 
      something, or ask a question.

          - Bob Pritchett

