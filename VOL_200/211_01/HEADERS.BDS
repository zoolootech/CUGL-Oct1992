HEADERS.BDS      VERS:- 01.00  DATE:- 09/26/86  TIME:- 09:36:37 PM

Short descriptions of C programs and related files.

Written for BDS C compiler, version 1.50a, by

John A. Rupley
30 Calle Belleza
Tucson, AZ  85716
(602) 325-4533

/***************************************************************************/

CHARFUNR.CSM 
CHARFUN.CRL 

Library of assembly code functions to handle character operations.

isalpha()  isupper()  islower()  isdigit()  isspace()  toupper()  tolower()

Converted cug routines by M.J. Maney from asm to csm format.


DIOR.C   
DIO.CRL 
DIO.H   

IO redirection library and header from BDS C and Van Nuys Toolkit, 
by Eugene H. Mallory.

Minor modification: 
	avoid CR-CR pair before LF by patch in putchar() and by adding
		declaration of _putc_last in DIO.H;




SCOPER.C   
SCOPE.CRL 

Library of functions for full screen input.

Minor modification of SCOPE, from CUG distribution disk:
	changed some control character representations;
	added tabs;
	clear and unprotect screen at entry, before set NOROLL and
		display template in <crtbuf>.


STRFUNR.CSM 
STRFUN.CRL 

Library of assembly code functions to handle string operations.

strlen()  strcmp()  strcpy()  strcat()

Converted cug routines by M.J. Maney from asm to csm format.


WILDEXPR.C
WILDEXP.CRL 

Modification of Van Nuys Toolkit - BDS C distribution version of WILDEXP:
	use of <du:>, by conversion to <u/d:> form;
	expansion of <d?:> and <?/d:>;
	all output given uu/d: prefix, even files in current drive/user area;
	restructuring of much of the code.

Size of code:			hex bytes
	this version:		CC1 		wildcard nos & du: (d?:, ?/d:)
	Van Nuys:		C8E		user numbers (u/d: form only)
	BDS C v1.50a:		A8E		no user numbers (d: form only)
(Inclusion of wildcard user numbers costs a little but not much.)
(The size of the du_ud() function is not included in the value cited for the
	memory requirement for this version)

The number of !names allowed is 40 (= 2 !d?: + 8 !du:).

NOTE:
There must be a <du:> --> <u/d:> conversion function = du_ud().
If the conversion is required only for WILDCARD, then it is sufficient
	to compile and link the du_ud function given at the end of this file.
A more general approach is to modify DEFF.CRL and DEFF2.CRL, 
	by adding the functions of STDLIB3R to DEFF.CRL, and 
	by patching the functions of DEFF2.CRL, as described in STDLIB3R.
If this is done, then all file opening, creation etc operations accept the
	<du:> form.


XMERGE1.TST 
XMERGE2.TST 

Test files, each consisting of several CAS abstracts for use in trials
of xmerger (for which CAS abstracts are the default option):

Usage: xmerger  <xmerge1.tst  xmerge2.tst  +results_file





XMERGER.C   
XMERGER.COM 

Merge sorted files, with DIO output redirection.

The files must be sorted on the same key used in the merge.
The key can be a sequence of digit fields.
The key length can be specified.
The key start can be defined by a string each record is searched for.

Records can be of variable length, defined by a delimiter string,
eg "\n" if each line is a record.
Records can be multiline.

Various options:  see help_mess() for summary.
For usage:  see help_mess().


The logic is adapted from that of the Van Nuys Toolkit program MERGE, 
by Eugene H. Mallory.
The function decode() is adapted from code in the Van Nuys Toolkit 
program SEARCH



XSORT.TST 

Test file consisting of several CAS abstracts for use in trials
of xsortr (CAS abstracts are the default option):

Usage: xsortr  xsort.tst  +results_file

XSORT.TST consists of XMERGE2.TST appended to XMERGE1.TST with an extra
record; thus it is unsorted with duplicate records. 





XSORTR.C   
XSORTR.COM 

Sort the file given as the only command-line parameter (except for 
DIO redirectors and -xxx options).

Output is to terminal or as redirected by DIO.

The file is read, record by record, to construct a tree, 
each node of which holds file sector and character-count 
information for the corresponding record.
Display of the tree gives the sorted file.

The sort key can be a sequence of digit fields.
The key length can be specified.
The key start can be defined by a string each record is searched for.

Records can be of variable length, defined by a delimiter string,
eg <\n> if each line is a record.
Records can be multiline.

The number of records is limited only by the free space 
below the stack (enough for ca 2000 records) 
and the amount of free disk space (which need be only enough 
to hold the sorted file).  

With a CMI hard disk, the install speed is about 1 second per record.

The impetus for writing this code came from the need to merge 
and sort lists of abstracts.  If the cas_flag is set, an unsorted file,  
comprising a set of lists and presumed to contain duplicate records, 
is sorted and output.  If a record is a duplicate, only one copy of 
the record is displayed, but the first identifying line of the duplicate 
is displayed at the head of this copy.

To carry out a transformation of set of chem. abstracts files into a 
single file of primary information (abs. #, title, etc, but no abstract or
index terms), then to sort the file:

	xsrchr  [<filelist]  file1  [file2 ....]  +cas/temp  -p 
			[program enters full screen input -
				type in search and io delimiter strings
				then ESC to continue]
	xsortr  cas/temp  +cas/sort

For a summary of the various options: see help_mess().

For usage:  see help_mess().

NOTE: the program expects a modified version of DIO, the failure to use
which may cause complications, probably easily remedied. 


The functions install() and treeprint() are from the Van Nuys Toolkit 
program MERGE, by Eugene H. Mallory.
The function decode() is an adaptation of code from the Van Nuys Toolkit 
program SEARCH.





XSRCH.TST 

Test file consisting of several CAS abstracts for use in trials of xsrchr
(CAS abstracts are the default option if XSRCH.ZIP = XSRCHCAS.ZIP):

Usage: xsrchr  xsrch.tst  +results_file
	[the program then enters full screen input - 
		it is setup for condensing CAS files -
		enter ESC to continue]

XSRCHR extracts condensed files like XMERGE1.TST, etc, from
full abstract files. 
XSRCHR also can extract records satisfying specific search strings.





XSRCH.ZIP 
XSRCHCAS.ZIP 
XSRCHSTD.ZIP 

Template files for full-screen input to XSRCHR.





XSRCHR.C   
XSRCHR.COM 

Search over each record of each file in wildcard filelist; 
if the seach pattern is found in a record, display it, with DIO output
redirection.

If the search pattern is given as the first command line parameter,
the record delimiter is assumed to be '\n'.

If the -p option is selected or the search pattern is not given on the
command line, there is full screen input of:
	search patterns;
	record delimiter;
	output delimiters;
	cas_flag;

In the case of full screen input, there can be up to 10 search patterns, 
which may be or'd, and'd, or not'd.

If the cas_flag is set, the file name is printed at the start of
the first line of output of each record.

Strings can include meta characters, such as '*', '?', etc.  
See help_mess for a listing of them.

Usage:

xsrch   [pattern]   input   [>output_ufn (def = crt)]   [-options (-h = help)] 

The input parameter is required.  It can be either:
	input_afn1 [input_anf2, ..]   and/or   <input_ufn_list
		
If a pattern to be searched for is given on the command line (rather than
given through full-screen input), it must precede the input parameter.

It is best to select full screen input with the option '-p', rather than
trust to default selection.

See help_mess for more information on options.

From public domain code: 
	Van Nuys SEARCH, DIO, WILDEXP (by Eugene H. Mallory):
		WILDEXP modified to allow du: == u/d:.
		DIO modified to avoid cr-cr-lf triple with putchar.
		some functions rewritten from code in SEARCH:
			decode()
			find()
			search()
	CUG SCOPE:
		Full screen input based on the template file XSRCH.ZIP:
			select  and, not, or   strings;
			select parts of record for output;
        		select record delimiter;
			select flags.

