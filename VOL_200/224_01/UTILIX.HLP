                       UTILIX DOCUMENTATION - VERSION 2.0

    UTILIX is a collection of UNIX commands for the IBM PC and compatibles
    running DOS 2.0 or higher.  The UTILIX commands are:
	cat 	concatenate and print files
	cecho 	echo arguments
	chmod   change file attributes
	cmp 	compare two files
	comm 	select or reject lines common to two sorted files
	ctime 	time a command
	expr	evaluate simple expression (long integer)
	find 	find files or directories
	grep 	search a file for a pattern (regular expressions)
	head 	print the first few lines of a file
	help	display the online help files for the UTILIX commands
	hoc 	an interactive language for floating point arithmetic
	ls 	list contents of directory
	od 	octal, decimal, hex, ascii, or floating point dump
	pr 	print file in format suitable for a printer
	rev 	reverse lines of a file
	rm 	remove (unlink) files
	sort 	sort files
	strings	search a file for character strings
	tail 	print the last few lines of a file
	tee 	output the input to several files
	test 	test condition of files or strings
	tr 	translate characters
	uniq 	report repeated lines in a file
	wc 	line, word and character count
	
    UTILIX  can be distributed freely if:
	(1) the fee is only for the cost of the disk and shipping charges,
	(2) the files are distributed as a complete set, and
	(3) the distributed files are the original, unmodified version.
    Users interested in obtaining any future updates of UTILIX can register 
    by sending $10 and their mailing address to :
    
	Tom Woods
	5813 Clearspring Rd.
	Baltimore, MD  21212
    
    Any registered users who report an undiscovered bug in any of the UTILIX 
    commands to the above address will receive a free update of UTILIX.  The 
    source code for UTILIX is also available.  The source code is written for 
    the CWARE DeSmet C compiler (Version 2.51).  To receive the source code, 
    send $50 to Tom Woods at the above address.  The source code is not 
    considered shareware and can not be distributed freely.

REFERENCES USED IN DEVELOPING UTILIX
    Bourne, S.R., "The UNIX System". London: Addison-Wesley Publ. Co., 1983.
    Kernighan, B.W. and Pike, B., "The UNIX Programming Environment". Englewood
	Cliffs: Prentice-Hall, Inc., 1984.
    Kernighan, B.W. and Plauger, P.J., "Software Tools". New York: Yourdon, 
	Inc., 1976.
    Kernighan, B.W. and Ritchie, D.M., "The C Programming Language", Englewood
	Cliffs: Prentice-Hall, Inc., 1978.



                  EXPANSIONS OF THE COMMAND LINE PARAMETERS
  
    The UTILIX commands decode the command line for quoted strings 
    (" and '), filenames with wildcards (* and ?), and parameter 
    substitutions ($).
    
    The command line is decoded as follows:
    
    Parameter substitution is done for names preceded by the '$' character.
    The parameters are any environment string such as PATH.  Parameter 
    substitution can be embedded in a string by enclosing the name in 
    parenthesis ({ }).  The '$' character can be quoted by the '\' character
    to pass the '$' character without parameter substitution.  If the parameter
    can not be found in the environment strings, a zero length string is 
    returned.  Examples with the UTILIX command cecho:
    
	cecho $PATH			Echo the PATH string
	cecho ${PATH}here		Concatenate the PATH string to "here"
	cecho \$20.5			Quote the '$' for no substitutions
	
    The MS DOS wildcards, * and ?, can be used in names on the command line
    which will expand the name into a list of files.  Examples:
    
	cecho *.exe			Echo all *.exe files
	cecho \dos\c??			Echo c?? files in the \dos directory
	cecho \*.bat			Echo *.bat files in the root directory
	
    Strings can also be quoted on the command line.  The single quote (') will
    eliminate any parameter substitution.  The double quote (") will still 
    allow parameter substitution and is useful to group several words into a 
    single string.  The quotes can also be quoted with the '\' character.  
    Examples:
    
	cecho "The path is $PATH"	Echo and substitute the PATH
	cecho '$PATH'			Echo without substituting PATH
	cecho '*.exe'			Echo without filename expansion
	cecho "This is a sentence."	Echo a group of words as single string
	cecho "enclosed by \" "         Echo with a double quote output
